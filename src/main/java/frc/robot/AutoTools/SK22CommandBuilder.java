package frc.robot.AutoTools;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import frc.robot.AutoTools.SK22Paths.DoNothing;
import frc.robot.AutoTools.SK22Paths.Drive1mForwardBackward;
import frc.robot.AutoTools.SK22Paths.DriveSplineCanned;
import frc.robot.AutoTools.SK22Paths.N2_HH_R;
import frc.robot.AutoTools.SK22Paths.T3_LHH_2A;
import frc.robot.AutoTools.SK22Paths.T4_HHHH_R1A;
import frc.robot.AutoTools.SK22Paths.T4_HHHH_R2B;
import frc.robot.AutoTools.SK22Paths.T4_LHHH_1A;
import frc.robot.AutoTools.SK22Paths.T4_LHHH_2B;
import frc.robot.AutoTools.SK22Paths.Taxi;

/**
 * A class that adds auto path options to smart dashboard if the segments to create the
 * paths are present.
 */
public class SK22CommandBuilder
{
    private File                     pathDirectory;
    private File[]                   files;
    private Map<String, Set<String>> dependencies = new HashMap<String, Set<String>>();
    private TrajectoryBuilder        pathBuilder;

    /**
     * Creates a new SK22CommandBuilder. It will create all the dependencies for each auto
     * path using the Autos file. It can then be used to display the possible auto paths
     * using the dependencies and the currently created path segments.
     * 
     * @param directory
     *            The file path to get to the Autos directory made by Pathweaver
     * @param pathBuilder
     *            A {@link TrajectoryBuilder} that contains the generated path segments
     */
    public SK22CommandBuilder(String directory, TrajectoryBuilder pathBuilder)
    {
        this.pathBuilder = pathBuilder;
        pathDirectory = new File(Filesystem.getDeployDirectory(), directory);
        files = pathDirectory.listFiles();
        for (File file : files)
        {
            try
            {
                Scanner myReader = new Scanner(file);
                Set<String> fileDependency = new HashSet<String>();
                while (myReader.hasNextLine())
                {
                    fileDependency.add(myReader.nextLine());
                }
                dependencies.put(file.getName(), fileDependency);
                myReader.close();
            }
            catch (FileNotFoundException e)
            {
                System.out.println(e);
            }
        }
    }

    /**
     * Gets all the possible autos that can be made using the Autos file from Pathweaver
     * and the paths gotten from {@link TrajectoryBuilder}.
     * 
     * @return A set containing all possible paths that can be created according to the
     *         Autos file and the paths that were able to be generated by the
     *         {@link TrajectoryBuilder} class handed in the constructor.
     */
    private Set<String> getPossibleAutos()
    {
        Set<String> commands = new HashSet<String>();
        Set<String> pathNames = new HashSet<String>();
        pathNames.addAll(dependencies.keySet());
        for (String path : pathNames)
        {
            if (pathBuilder.hasTrajectories(dependencies.get(path)))
            {
                commands.add(path);
            }
        }
        return commands;
    }

    /**
     * Adds all the options to the shuffleboard using the information given from the Autos
     * path segments. It will add the option if all the segments for the specified path is
     * present.
     * 
     * @param displayMethod
     *            The function required to add the options for the paths
     */
    public void displayPossibleAutos(SendableChooser<AutoPaths> displayMethod)
    {
        /**
         * A set of autos that are possible with the known auto paths and their
         * dependencies
         */
        Set<String> possibleAutos = getPossibleAutos();

        // Default
        displayMethod.setDefaultOption("Do Nothing", new DoNothing());

        // Test Paths

        displayMethod.addOption("Drive canned path", new DriveSplineCanned());

        if (possibleAutos.contains("Drive1mForwardBackward"))
        {
            displayMethod.addOption("Drive forwards then backwards 1m",
                new Drive1mForwardBackward());
        }

        // Adds paths if they are possible to make
        if (possibleAutos.contains("Taxi"))
        {
            displayMethod.addOption("Taxi", new Taxi());
        }
        if (possibleAutos.contains("Radial (HH)"))
        {
            displayMethod.addOption("2 Ball Radial HH", new N2_HH_R());
        }
        // TODO: Must make skeleton commands for all 3 ball autos
        if (possibleAutos.contains("3T(LHH) Tarmac 2A"))
        {
            displayMethod.addOption("3 Ball Terminal Tarmac 2A", new T3_LHH_2A());
        }
        if (possibleAutos.contains("4T(LHHH) Tarmac 1A"))
        {
            displayMethod.addOption("4 Ball Terminal Tarmac 1A", new T4_LHHH_1A());
        }
        if (possibleAutos.contains("4T(LHHH) Tarmac 2B"))
        {
            displayMethod.addOption("4 Ball Terminal Tarmac 2B", new T4_LHHH_2B());
        }
        if (possibleAutos.contains("4T(HHHH) Tarmac 1A"))
        {
            displayMethod.addOption("4 Ball Terminal Tarmac 1A Radial", new T4_HHHH_R1A());
        }
        if (possibleAutos.contains("4T(HHHH) Tarmac 2B"))
        {
            displayMethod.addOption("4 Ball Terminal Tarmac 2B Radial", new T4_HHHH_R2B());
        }
    }
}
