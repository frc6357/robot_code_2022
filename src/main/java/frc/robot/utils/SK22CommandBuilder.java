package frc.robot.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

import edu.wpi.first.wpilibj.Filesystem;
import frc.robot.subsystems.base.SuperClasses.AutoCommands;

public class SK22CommandBuilder
{
    private File pathDirectory;
    private File[] files;
    private Map<String, Set<String>> dependencies = new HashMap<String, Set<String>>();
    private TrajectoryBuilder pathBuilder;

    /**
     * Creates a new SK22CommandBuilder. It will create all the dependencies for each auto
     * path using the Autos file. It can then be used to display the possible auto paths
     * using the dependencies and the currently created path segments.
     * 
     * @param directory
     *            The file path to get to the Autos directory made by Pathweaver
     * @param pathBuilder
     *            A {@link TrajectoryBuilder} that contains the generated path segments
     */
    public SK22CommandBuilder(String directory, TrajectoryBuilder pathBuilder)
    {
        this.pathBuilder = pathBuilder;
        pathDirectory = new File(Filesystem.getDeployDirectory(), directory);
        files = pathDirectory.listFiles();
        for (File file : files)
        {
            try
            {
                Scanner myReader = new Scanner(file);
                Set<String> fileDependency = new HashSet<String>();
                while (myReader.hasNextLine())
                {
                    fileDependency.add(myReader.nextLine());
                }
                dependencies.put(file.getName(), fileDependency);
                myReader.close();
            }
            catch (FileNotFoundException e)
            {
                System.out.println(e);
            }
        }
    }

    /**
     * Gets all the possible autos that can be made using the Autos file from Pathweaver
     * and the paths gotten from {@link TrajectoryBuilder}.
     * 
     * @return A set containing all possible paths that can be created according to the
     *         Autos file and the paths that were able to be generated by the
     *         {@link TrajectoryBuilder} class handed in the constructor.
     */
    private Set<String> getPossibleAutos()
    {
        Set<String> commands = new HashSet<String>();
        Set<String> pathNames = new HashSet<String>();
        pathNames.addAll(dependencies.keySet());
        for (String path : pathNames)
        {
            if (pathBuilder.hasTrajectories(dependencies.get(path)))
            {
                commands.add(path);
            }
        }
        return commands;
    }

    /**
     * Adds all the options to the shuffleboard using the information given from the Autos
     * path segments. It will add the option if all the segments for the specified path is
     * present.
     * 
     * @param displayMethod
     *            The function required to add the options for the paths
     */
    public void displayPossibleAutos(SmartdashboardPaths displayMethod)
    {
        /**
         * A set of autos that are possible with the known auto paths and their
         * dependencies
         */
        Set<String> possibleAutos = getPossibleAutos();

        // Adds paths if they are possible to make
        if (possibleAutos.contains("Taxi"))
        {
            displayMethod.display("Taxi", AutoCommands.Taxi);
        }
        if (possibleAutos.contains("Radial (HH)"))
        {
            displayMethod.display("2 Ball Radial HH", AutoCommands.N2_HH_R);
        }
        if (possibleAutos.contains("Low to Ball 1 (LH)"))
        {
            displayMethod.display("Low to Ball 1 (LH)", AutoCommands.N2_LH_1A);
        }
        if (possibleAutos.contains("Low to Ball 2 (LH)"))
        {
            displayMethod.display("Low to Ball 2 (LH)", AutoCommands.N2_LH_2A);
        }
        if (possibleAutos.contains("Low to Ball 3 (LH)"))
        {
            displayMethod.display("Low to Ball 3 (LH)", AutoCommands.N2_LH_2B);
        }
        if (possibleAutos.contains("2(LL) Tarmac 1A"))
        {
            displayMethod.display("2 Ball Tarmac 1A LL", AutoCommands.N2_LL_1A);
        }
        if (possibleAutos.contains("2(LL) Tarmac 2A"))
        {
            displayMethod.display("2 Ball Tarmac 2A LL", AutoCommands.N2_LL_2A);
        }
        if (possibleAutos.contains("2(LL) Tarmac 2B"))
        {
            displayMethod.display("2 Ball Tarmac 2A LL", AutoCommands.N2_LL_2B);
        }
        if (possibleAutos.contains("3(LHH) Tarmac 1A"))
        {
            displayMethod.display("3 Ball Tarmac 1A", AutoCommands.N3_LHH_1A);
        }
        if (possibleAutos.contains("3(LHH) Tarmac 2A"))
        {
            displayMethod.display("3 Ball Tarmac 2A", AutoCommands.N3_LHH_2A);
        }
        if (possibleAutos.contains("3(LHH) Tarmac 2B"))
        {
            displayMethod.display("3 Ball Tarmac 2B", AutoCommands.N3_LHH_2B);
        }
        if (possibleAutos.contains("3(HHH) Tarmac 1A"))
        {
            displayMethod.display("3 Ball Tarmac 1A Radial", AutoCommands.N3_HHH_R1A);
        }
        if (possibleAutos.contains("3(HHH) Tarmac 2A"))
        {
            displayMethod.display("3 Ball Tarmac 2A Radial", AutoCommands.N3_HHH_R2A);
        }
        if (possibleAutos.contains("3(HHH) Tarmac 2B"))
        {
            displayMethod.display("3 Ball Tarmac 2B Radial", AutoCommands.N3_HHH_R2B);
        }
        if (possibleAutos.contains("4T(LHHH) Tarmac 1A"))
        {
            displayMethod.display("4 Ball Terminal Tarmac 1A", AutoCommands.T4_LHHH_1A);
        }
        if (possibleAutos.contains("4T(LHHH) Tarmac 2B"))
        {
            displayMethod.display("4 Ball Terminal Tarmac 2B", AutoCommands.T4_LHHH_2B);
        }
        if (possibleAutos.contains("4T(HHHH) Tarmac 1A"))
        {
            displayMethod.display("4 Ball Terminal Tarmac 1A Radial", AutoCommands.T4_HHHH_R1A);
        }
        if (possibleAutos.contains("4T(HHHH) Tarmac 2B"))
        {
            displayMethod.display("4 Ball Terminal Tarmac 2B Radial", AutoCommands.T4_HHHH_R2B);
        }
    }
}
